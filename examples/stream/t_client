// Real-time speech recognition of input from a microphone
//
// A very quick-n-dirty implementation serving mainly as a proof of concept.
//
#include <fstream>
#include "common-sdl.h"
#include "common.h"
#include "whisper.h"

#include <cassert>
#include <cstdio>
#include <string>
#include <thread>
#include <vector>
#include <fstream>
#include <iostream>


#include <websocketpp/config/asio_no_tls_client.hpp>
#include <websocketpp/client.hpp>
#include <streambuf>

// Глобальный объект клиента
//websocketpp::client<websocketpp::config::asio_client> echo_client;
typedef websocketpp::client<websocketpp::config::asio_client> client;

auto client_thread_function = [](client* echo_client) {
    // Запуск клиента
    echo_client->run();
    echo_client->stop();  // stop вместо close
};

void send_float_vector(client * cli, client::connection_ptr * con, const std::vector<float> & vec)
{
    try {
        cli->send(
                (*con)->get_handle(),
                vec.data(),
                vec.size() * sizeof(float),
                websocketpp::frame::opcode::binary
        );
        std::this_thread::sleep_for(std::chrono::seconds(3));
    } catch (const std::exception &e) {
        // Обработка исключения
        std::cerr << "Exception caught in send bytes: " << e.what() << std::endl;
        exit(1);
    }
}

//  500 -> 00:05.000
// 6000 -> 01:00.000
std::string to_timestamp(int64_t t) {
    int64_t sec = t/100;
    int64_t msec = t - sec*100;
    int64_t min = sec/60;
    sec = sec - min*60;

    char buf[32];
    snprintf(buf, sizeof(buf), "%02d:%02d.%03d", (int) min, (int) sec, (int) msec);

    return std::string(buf);
}

// command-line parameters
struct whisper_params {
    int32_t n_threads  = std::min(4, (int32_t) std::thread::hardware_concurrency());
    int32_t step_ms    = 3000;
    int32_t length_ms  = 10000;
    int32_t keep_ms    = 200;
    int32_t capture_id = -1;
    int32_t max_tokens = 32;
    int32_t audio_ctx  = 0;

    float vad_thold    = 0.6f;
    float freq_thold   = 100.0f;

    bool speed_up      = false;
    bool translate     = false;
    bool no_fallback   = false;
    bool print_special = false;
    bool no_context    = true;
    bool no_timestamps = false;
    bool tinydiarize   = false;
    bool save_audio    = false; // save audio to wav file
    bool use_gpu       = true;

    std::string language  = "en";
    std::string model     = "models/ggml-base.en.bin";
    std::string fname_out;
};

void whisper_print_usage(int argc, char ** argv, const whisper_params & params);

bool whisper_params_parse(int argc, char ** argv, whisper_params & params) {
    /* Параметр argv[1] всегда будет IP адресом сервера а дальше прочие опции */
    for (int i = 2; i < argc; i++) {
        std::string arg = argv[i];

        if (arg == "-h" || arg == "--help") {
            whisper_print_usage(argc, argv, params);
            exit(0);
        }
        else if (arg == "-t"    || arg == "--threads")       { params.n_threads     = std::stoi(argv[++i]); }
        else if (                  arg == "--step")          { params.step_ms       = std::stoi(argv[++i]); }
        else if (                  arg == "--length")        { params.length_ms     = std::stoi(argv[++i]); }
        else if (                  arg == "--keep")          { params.keep_ms       = std::stoi(argv[++i]); }
        else if (arg == "-c"    || arg == "--capture")       { params.capture_id    = std::stoi(argv[++i]); }
        else if (arg == "-mt"   || arg == "--max-tokens")    { params.max_tokens    = std::stoi(argv[++i]); }
        else if (arg == "-ac"   || arg == "--audio-ctx")     { params.audio_ctx     = std::stoi(argv[++i]); }
        else if (arg == "-vth"  || arg == "--vad-thold")     { params.vad_thold     = std::stof(argv[++i]); }
        else if (arg == "-fth"  || arg == "--freq-thold")    { params.freq_thold    = std::stof(argv[++i]); }
        else if (arg == "-su"   || arg == "--speed-up")      { params.speed_up      = true; }
        else if (arg == "-tr"   || arg == "--translate")     { params.translate     = true; }
        else if (arg == "-nf"   || arg == "--no-fallback")   { params.no_fallback   = true; }
        else if (arg == "-ps"   || arg == "--print-special") { params.print_special = true; }
        else if (arg == "-kc"   || arg == "--keep-context")  { params.no_context    = false; }
        else if (arg == "-l"    || arg == "--language")      { params.language      = argv[++i]; }
        else if (arg == "-m"    || arg == "--model")         { params.model         = argv[++i]; }
        else if (arg == "-f"    || arg == "--file")          { params.fname_out     = argv[++i]; }
        else if (arg == "-tdrz" || arg == "--tinydiarize")   { params.tinydiarize   = true; }
        else if (arg == "-sa"   || arg == "--save-audio")    { params.save_audio    = true; }
        else if (arg == "-ng"   || arg == "--no-gpu")        { params.use_gpu       = false; }

        else {
            fprintf(stderr, "error: unknown argument: %s\n", arg.c_str());
            whisper_print_usage(argc, argv, params);
            exit(0);
        }
    }

    return true;
}


//bool whisper_params_parse(int argc, char ** argv, whisper_params & params) {
//    for (int i = 1; i < argc; i++) {
//        std::string arg = argv[i];
//
//        if (arg == "-h" || arg == "--help") {
//            whisper_print_usage(argc, argv, params);
//            exit(0);
//        }
//        else if (arg == "-t"    || arg == "--threads")       { params.n_threads     = std::stoi(argv[++i]); }
//        else if (                  arg == "--step")          { params.step_ms       = std::stoi(argv[++i]); }
//        else if (                  arg == "--length")        { params.length_ms     = std::stoi(argv[++i]); }
//        else if (                  arg == "--keep")          { params.keep_ms       = std::stoi(argv[++i]); }
//        else if (arg == "-c"    || arg == "--capture")       { params.capture_id    = std::stoi(argv[++i]); }
//        else if (arg == "-mt"   || arg == "--max-tokens")    { params.max_tokens    = std::stoi(argv[++i]); }
//        else if (arg == "-ac"   || arg == "--audio-ctx")     { params.audio_ctx     = std::stoi(argv[++i]); }
//        else if (arg == "-vth"  || arg == "--vad-thold")     { params.vad_thold     = std::stof(argv[++i]); }
//        else if (arg == "-fth"  || arg == "--freq-thold")    { params.freq_thold    = std::stof(argv[++i]); }
//        else if (arg == "-su"   || arg == "--speed-up")      { params.speed_up      = true; }
//        else if (arg == "-tr"   || arg == "--translate")     { params.translate     = true; }
//        else if (arg == "-nf"   || arg == "--no-fallback")   { params.no_fallback   = true; }
//        else if (arg == "-ps"   || arg == "--print-special") { params.print_special = true; }
//        else if (arg == "-kc"   || arg == "--keep-context")  { params.no_context    = false; }
//        else if (arg == "-l"    || arg == "--language")      { params.language      = argv[++i]; }
//        else if (arg == "-m"    || arg == "--model")         { params.model         = argv[++i]; }
//        else if (arg == "-f"    || arg == "--file")          { params.fname_out     = argv[++i]; }
//        else if (arg == "-tdrz" || arg == "--tinydiarize")   { params.tinydiarize   = true; }
//        else if (arg == "-sa"   || arg == "--save-audio")    { params.save_audio    = true; }
//        else if (arg == "-ng"   || arg == "--no-gpu")        { params.use_gpu       = false; }
//
//        else {
//            fprintf(stderr, "error: unknown argument: %s\n", arg.c_str());
//            whisper_print_usage(argc, argv, params);
//            exit(0);
//        }
//    }
//
//    return true;
//}

void whisper_print_usage(int /*argc*/, char ** argv, const whisper_params & params) {
    fprintf(stderr, "\n");
    fprintf(stderr, "usage: %s [options]\n", argv[0]);
    fprintf(stderr, "\n");
    fprintf(stderr, "options:\n");
    fprintf(stderr, "  -h,       --help          [default] show this help message and exit\n");
    fprintf(stderr, "  -t N,     --threads N     [%-7d] number of threads to use during computation\n",    params.n_threads);
    fprintf(stderr, "            --step N        [%-7d] audio step size in milliseconds\n",                params.step_ms);
    fprintf(stderr, "            --length N      [%-7d] audio length in milliseconds\n",                   params.length_ms);
    fprintf(stderr, "            --keep N        [%-7d] audio to keep from previous step in ms\n",         params.keep_ms);
    fprintf(stderr, "  -c ID,    --capture ID    [%-7d] capture device ID\n",                              params.capture_id);
    fprintf(stderr, "  -mt N,    --max-tokens N  [%-7d] maximum number of tokens per audio chunk\n",       params.max_tokens);
    fprintf(stderr, "  -ac N,    --audio-ctx N   [%-7d] audio context size (0 - all)\n",                   params.audio_ctx);
    fprintf(stderr, "  -vth N,   --vad-thold N   [%-7.2f] voice activity detection threshold\n",           params.vad_thold);
    fprintf(stderr, "  -fth N,   --freq-thold N  [%-7.2f] high-pass frequency cutoff\n",                   params.freq_thold);
    fprintf(stderr, "  -su,      --speed-up      [%-7s] speed up audio by x2 (reduced accuracy)\n",        params.speed_up ? "true" : "false");
    fprintf(stderr, "  -tr,      --translate     [%-7s] translate from source language to english\n",      params.translate ? "true" : "false");
    fprintf(stderr, "  -nf,      --no-fallback   [%-7s] do not use temperature fallback while decoding\n", params.no_fallback ? "true" : "false");
    fprintf(stderr, "  -ps,      --print-special [%-7s] print special tokens\n",                           params.print_special ? "true" : "false");
    fprintf(stderr, "  -kc,      --keep-context  [%-7s] keep context between audio chunks\n",              params.no_context ? "false" : "true");
    fprintf(stderr, "  -l LANG,  --language LANG [%-7s] spoken language\n",                                params.language.c_str());
    fprintf(stderr, "  -m FNAME, --model FNAME   [%-7s] model path\n",                                     params.model.c_str());
    fprintf(stderr, "  -f FNAME, --file FNAME    [%-7s] text output file name\n",                          params.fname_out.c_str());
    fprintf(stderr, "  -tdrz,    --tinydiarize   [%-7s] enable tinydiarize (requires a tdrz model)\n",     params.tinydiarize ? "true" : "false");
    fprintf(stderr, "  -sa,      --save-audio    [%-7s] save the recorded audio to a file\n",              params.save_audio ? "true" : "false");
    fprintf(stderr, "  -ng,      --no-gpu        [%-7s] disable GPU inference\n",                          params.use_gpu ? "false" : "true");
    fprintf(stderr, "\n");
}

int audio_processing_function(int argc, char ** argv, client * echo_client, client::connection_ptr *con) {
    whisper_params params;
    if (whisper_params_parse(argc, argv, params) == false) {
        return 1;
    }
    params.keep_ms = std::min(params.keep_ms, params.step_ms);
    params.length_ms = std::max(params.length_ms, params.step_ms);

    const int n_samples_step = (1e-3 * params.step_ms) * WHISPER_SAMPLE_RATE;
    const int n_samples_len = (1e-3 * params.length_ms) * WHISPER_SAMPLE_RATE;
    const int n_samples_keep = (1e-3 * params.keep_ms) * WHISPER_SAMPLE_RATE;
    const int n_samples_30s = (1e-3 * 30000.0) * WHISPER_SAMPLE_RATE;

    const bool use_vad = n_samples_step <= 0; // sliding window mode uses VAD

    const int n_new_line = !use_vad ? std::max(1, params.length_ms / params.step_ms - 1)
                                    : 1; // number of steps to print new line

    params.no_timestamps = !use_vad;
    params.no_context |= use_vad;
    params.max_tokens = 0;

    // init audio

    audio_async audio(params.length_ms);
    if (!audio.init(params.capture_id, WHISPER_SAMPLE_RATE)) {
        fprintf(stderr, "%s: audio.init() failed!\n", __func__);
        return 1;
    }

    audio.resume();

    // whisper init
    if (params.language != "auto" && whisper_lang_id(params.language.c_str()) == -1) {
        fprintf(stderr, "error: unknown language '%s'\n", params.language.c_str());
        whisper_print_usage(argc, argv, params);
        exit(0);
    }

    struct whisper_context_params cparams;
    cparams.use_gpu = params.use_gpu;

    struct whisper_context *ctx = whisper_init_from_file_with_params(params.model.c_str(), cparams);

    std::vector<float> pcmf32(n_samples_30s, 0.0f);
    std::vector<float> pcmf32_old;
    std::vector<float> pcmf32_new(n_samples_30s, 0.0f);

    std::vector<whisper_token> prompt_tokens;
    int n_iter = 0;

    bool is_running = true;
    printf("[Start speaking]\n");
    fflush(stdout);

    auto t_last = std::chrono::high_resolution_clock::now();
    const auto t_start = t_last;

    // main audio loop
    while (is_running) {
        // handle Ctrl + C
        is_running = sdl_poll_events();

        if (!is_running) {
            break;
        }

        // process new audio
        if (!use_vad) {
            std::cerr << pcmf32_new.size() << "  NOT USE VAD" << std::endl;
            while (true) {
                audio.get(params.step_ms, pcmf32_new);
                send_float_vector(echo_client, con, pcmf32_new);

                std::cerr << pcmf32_new.size() << " байт отправлены на сервер от клиента" << std::endl;
                std::cerr << std::count_if(pcmf32_new.begin(), pcmf32_new.end(), [](float x) { return x != 0; })
                          << " из них ненулевые" << std::endl;
//                std::this_thread::sleep_for(std::chrono::milliseconds(100));

                if ((int) pcmf32_new.size() > 2 * n_samples_step) {
                    fprintf(stderr, "\n\n%s: WARNING: cannot process audio fast enough, dropping audio ...\n\n",
                            __func__);
                    audio.clear();
                    continue;
                }

                if ((int) pcmf32_new.size() >= n_samples_step) {
                    audio.clear();
                    break;
                }

                std::this_thread::sleep_for(std::chrono::milliseconds(1));
            }

            const int n_samples_new = pcmf32_new.size();

            // take up to params.length_ms audio from previous iteration
            const int n_samples_take = std::min((int) pcmf32_old.size(),
                                                std::max(0, n_samples_keep + n_samples_len - n_samples_new));

            pcmf32.resize(n_samples_new + n_samples_take);

            for (int i = 0; i < n_samples_take; i++) {
                pcmf32[i] = pcmf32_old[pcmf32_old.size() - n_samples_take + i];
            }

            memcpy(pcmf32.data() + n_samples_take, pcmf32_new.data(), n_samples_new * sizeof(float));

            pcmf32_old = pcmf32;
        } else {
            const auto t_now = std::chrono::high_resolution_clock::now();
            const auto t_diff = std::chrono::duration_cast<std::chrono::milliseconds>(t_now - t_last).count();

            if (t_diff < 2000) {
                std::this_thread::sleep_for(std::chrono::milliseconds(100));

                continue;
            }

            audio.get(params.step_ms, pcmf32_new);
            send_float_vector(echo_client, con, pcmf32_new);

            std::cerr << "Байты отправлены на сервер от клиента 2" << std::endl;
//           std::this_thread::sleep_for(std::chrono::milliseconds(10000));
            if (::vad_simple(pcmf32_new, WHISPER_SAMPLE_RATE, 1000, params.vad_thold, params.freq_thold, false)) {
                audio.get(params.length_ms, pcmf32);
            } else {
                std::this_thread::sleep_for(std::chrono::milliseconds(100));

                continue;
            }

            t_last = t_now;
        }
    }

    audio.pause();
    whisper_print_timings(ctx);
    whisper_free(ctx);
    return 0;
}

//запуск

//./stream_client_fin 192.168.0.100 -- тут адрес сервера которы еще не подключен

int main(int argc, char **argv) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <server_ip> [options]" << std::endl;
        return 1;
    }

    std::string server_ip = argv[1];

    // Запуск потока для клиента
    //std::thread client_thread(client_thread_function);

    // Объект клиента
    client echo_client;

    // Инициализация клиента
    echo_client.init_asio();

    // Установка обработчиков
    echo_client.set_message_handler([](websocketpp::connection_hdl hdl, client::message_ptr msg) {
        std::cerr << "Распознанный текст от сервера: " << msg->get_payload() << std::endl;
    });

    // Получение соединения с сервером
    websocketpp::lib::error_code ec;
//    client::connection_ptr con = echo_client.get_connection("ws://localhost:9002", ec);
    client::connection_ptr con = echo_client.get_connection("ws://" + server_ip + ":9002", ec);


    if (ec) {
        std::cerr << "Could not create connection because: " << ec.message() << std::endl;
        return 1;
    }

    // Подключение к серверу
    echo_client.connect(con);


    // Запуск потока для клиента
    std::thread client_thread(client_thread_function, &echo_client);

    // Запуск основной функции для обработки звука
    audio_processing_function(argc, argv, &echo_client, &con);

    // Ожидание завершения потока клиента
    client_thread.join();

    return 0;
}


//int main(int argc, char **argv) {
//    // Запуск потока для клиента
//    //std::thread client_thread(client_thread_function);
//
//    // Объект клиента
//    client echo_client;
//
//    // Инициализация клиента
//    echo_client.init_asio();
//
//    // Установка обработчиков
//    echo_client.set_message_handler([](websocketpp::connection_hdl hdl, client::message_ptr msg) {
//        std::cerr << "Received Message: " << msg->get_payload() << std::endl;
//    });
//
//    // Получение соединения с сервером
//    websocketpp::lib::error_code ec;
//    client::connection_ptr con = echo_client.get_connection("ws://localhost:9002", ec);
//
//    if (ec) {
//        std::cerr << "Could not create connection because: " << ec.message() << std::endl;
//        return 1;
//    }
//
//    // Подключение к серверу
//    echo_client.connect(con);
//
//
//    // Запуск потока для клиента
//    std::thread client_thread(client_thread_function, &echo_client);
//
//    // Запуск основной функции для обработки звука
//    audio_processing_function(argc, argv, &echo_client, &con);
//
//    // Ожидание завершения потока клиента
//    client_thread.join();
//
//    return 0;
//}
